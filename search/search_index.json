{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"WHO-AM-I","text":"<p>Welcome to my personal blog, and thank you for visiting!</p> <p>Greeting ...</p> <p>I am GNU/LINUX system engineer and open source enthusiast. I am an avid supporter of Free Software and GNU Project.</p>"},{"location":"#employment-history","title":"Employment History","text":"<ul> <li>Group SII : Linux System Engineer</li> <li>Numberly (1000mercis Group) : Apprentice Linux SysAdmin</li> <li>Net-Veille Systems : Apprentice Linux Admin</li> <li>LeCab : Apprentice System Administrator</li> <li>Capgemini : IT Production</li> <li>INTELCIA : Network Support Specialist</li> <li>NSE : Network Administrator</li> <li>Colas : Apprentice IT Support</li> </ul>"},{"location":"#open-source-community-contribution","title":"Open Source community contribution","text":""},{"location":"#fedora-infra","title":"Fedora Infra","text":"<p>I joined Fedora Infrastructure in july 2020, I am currently working on the monitoring and automation stuff.</p>"},{"location":"#contact-me","title":"Contact me","text":"<ul> <li>Email : seddik AT fedoraproject DOT org</li> <li>IRC libera.chat : saibug</li> <li>Matrix [fedora.im] : saibug #fedora-admin #fedora-noc</li> <li>Slack [grafana] : saibug</li> </ul>"},{"location":"posts/28-20-25-vagrant-installing-running/","title":"28 20 25 vagrant installing running","text":"<p>\u201cVagrant is a versatile tool used by devops engineers, developers, system administrators, and tech enthusiasts to create development and testing environments. It enables building and managing virtual machines within a single streamlined workflow. By focusing on automation, it reduces environment setup time, and makes the works on my machine issue a thing of the past.\u201d</p> <p>If you\u2019re already comfortable with Vagrant basics, the official documentation serves as a thorough reference for all features.</p> <p>Vagrant provides easy to configure, reproducible, and portable environments built on industry-standard technology and controlled by one consistent workflow. This helps to maximize the productivity and flexibility of you and your team.</p> <pre><code>https://developer.hashicorp.com/vagrant/intro\n</code></pre> <p>This guide explains how to get Vagrant running on fedora based system. I started with minimal Fedora install to minimize the host\u2019s memory footprint, but the steps should work on any Fedora setup, whether Server or Workstation.</p> <ol> <li> <p>Verify the machine supports wirtualisation: <pre><code>$ sudo lscpu | grep Virtualization\nVirtualization:                  VT-x\nVirtualization type:             full\n</code></pre></p> </li> <li> <p>Install qemu-kvm: <pre><code>$ sudo dnf install qemu-kvm libvirt libguestfs-tools virt-install rsync\n</code></pre></p> </li> <li> <p>Start and enable libvirt daemon: <pre><code>$ sudo systemctl enable --now libvirtd\n</code></pre></p> </li> <li> <p>Install Vagrant: <pre><code>$ sudo dnf install vagrant\n</code></pre></p> </li> <li> <p>Install libvirtd\u2019s plugin: <pre><code>$ sudo vagrant plugin install vagrant-libvirt\n</code></pre></p> </li> <li> <p>Add the box: <pre><code>$ vagrant box add fedora/41-cloud-base --provider=libvirt\n</code></pre></p> </li> <li> <p>Set up environment: <pre><code>$ mkdir vagrant-demo\n$ cd vagrant-demo\n$ vi Vagrantfile\nVagrant.configure(\"2\") do |config|\n  config.vm.box = \"fedora/41-cloud-base\"\nend\n</code></pre></p> </li> <li> <p>Check the file: <pre><code>$ vagrant status\nCurrent machine states:\n\ndefault not created (libvirt)\n\nThe Libvirt domain is not created. Run 'vagrant up' to create it.\n</code></pre></p> </li> <li> <p>Start the box: <pre><code>$ vagrant up\n</code></pre></p> </li> <li> <p>Connect to your machine: <pre><code>$ vagrant ssh\n</code></pre></p> </li> </ol> <p>Yeahhh, that\u2019s it, you\u2019ve now Vagrant working on you machine.</p> <p>\u201cTo stop the machine\u201d, use vagrant halt, it simply halts the host, leaving the vm and its storage disk in place.</p> <p>Tips: There\u2019s no need to download boxes ahead of time, you can define the box provider in the Vagrantfile, then Vagrant will download the box when you run vagrant up if it\u2019s missing. The following example includes Memory and CPU configuration: <pre><code># -*- mode: ruby -*-\n# vi: set ft=ruby :\n\nVagrant.configure(\"2\") do |config|\n  config.vm.box = \"fedora/41-cloud-base\"\n  config.vm.provider :libvirt do |libvirt|\n    libvirt.cpus = 1\n    libvirt.memory = 1024\n  end\nend\n</code></pre></p> <p>For more details on using Vagrant, creating own machines, and working with different boxes, refer to the official documentation at https://www.vagrantup.com/docs</p>"}]}